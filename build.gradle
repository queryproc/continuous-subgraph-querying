plugins {
    id 'java'
    id 'antlr'
    id 'maven-publish'
    id 'application'
}

group = 'ca.waterloo.dsg'
version = '0.1.0'

repositories {
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.7"

    implementation 'commons-cli:commons-cli:1.4'
    implementation 'org.apache.logging.log4j:log4j-api:2.8.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'com.google.code.gson:gson:2.8.9'

    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.assertj:assertj-core:3.8.0'
    testImplementation 'org.mockito:mockito-core:2.9.0'
}

// ANTLR4 configuration
tasks.withType(AntlrTask) {
    maxHeapSize = "64m"
    arguments += [
            "-long-messages",
            "-visitor",
            "-package", "ca.waterloo.dsg.graphflow.grammar"
    ]
}
sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated-src/antlr/main"
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile) {
    options.compilerArgs.addAll(["-Xlint:all", "-Xlint:-processing", "-Xlint:-cast", "-Xlint:-serial"])
}

application {
    applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]
    applicationName = "graphflow"
}

// Disable default distribution tasks
tasks.named("distZip").configure { enabled = false }
tasks.named("distTar").configure { enabled = false }

// Custom executable scripts
def scripts = [
        'dataset-serializer': 'ca.waterloo.dsg.graphflow.runner.dataset.DatasetSerializer',
        'catalog-serializer': 'ca.waterloo.dsg.graphflow.runner.dataset.CatalogSerializer',
        'query-plan-generator': 'ca.waterloo.dsg.graphflow.runner.plan.QueryPlansGenerator',
        'query-plan-executor': 'ca.waterloo.dsg.graphflow.runner.plan.QueryPlanSerExecutor',
]

scripts.each { fileName, className ->
    tasks.create(name: fileName, type: CreateStartScripts) {
        mainClassName = className
        applicationName = fileName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + configurations.runtimeClasspath
    }
    applicationDistribution.into("bin") {
        from(tasks[fileName])
        fileMode = 0755
    }
}

wrapper {
    gradleVersion = '8.12'
    distributionType = Wrapper.DistributionType.ALL
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set("sources")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact tasks.sourceJar
        }
    }
}

tasks.test {
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
    }
}

tasks.installDist {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}